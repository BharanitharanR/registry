openapi: "3.0.2"
info:
  title: Registry Service
  description: A service  for registering the services , more like a service discovery
  version: 1.0.0
paths:
  /registry/service/{serviceId}:
    post:
      summary: Post the service that needs to be registered.
      operationId: addService
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The serviceId for which the data needs to be registered
          schema:
            type: string
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serviceSchema'
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceSchema'
        "400":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      summary: Get the details of the services being registered
      operationId: getService
      parameters:
        - name: serviceId
          in: path
          required: true
          description: get thd details of the service
          schema:
            type: string

      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceSchema'
        "400":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      summary: Get the details of the services being registered
      operationId: removeService
      parameters:
        - name: serviceId
          in: path
          required: true
          description: get thd details of the service
          schema:
            type: string
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteServiceSchema'
        "400":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /registry/service/heartbeat/{serviceId}:
    post:
      summary: Post the service that needs to be registered
      operationId: registerHeartbeat
      parameters:
        - name: serviceId
          in: path
          required: true
          description: The serviceId for which the data needs to be registered
          schema:
            type: string
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/serviceSchema'
      responses:
        "200":
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceSchema'
        "400":
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


components:
  schemas:
    serviceSchema:
      type: "object"
      properties:
        serviceId:
          type: string
        ServiceName:
          type: string
        ServiceHostIP:
          type: string
        Status:
          type: string
        lastModifiedTimeStamp:
          type: object
          $ref: '#/components/schemas/MongoDate'

    DeleteServiceSchema:
      type: "object"
      properties:
        serviceId:
          type: string
        deleteStatus:
          type: string
        lastModifiedTimeStamp:
          type: object
          $ref: '#/components/schemas/MongoDate'

    Error:
      type: "object"
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    serviceCollection:
      type: "object"
      properties:
        userId:
          type: string
        name:
          type: string
        lastModifiedTimeStamp:
          type: object
          $ref: '#/components/schemas/MongoDate'

    MongoDate:
      type: "object"
      properties:
        $date:
          type: string
          format: time
